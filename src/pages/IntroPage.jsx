import React, { useEffect, useRef } from 'react';
import { gsap } from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';
import { TextPlugin } from 'gsap/TextPlugin';
import { useNavigate } from 'react-router-dom';
import './IntroPage.css';

// ƒêƒÉng k√Ω GSAP plugins
gsap.registerPlugin(ScrollTrigger, TextPlugin);

const IntroPage = () => {
    const navigate = useNavigate();
    const heroRef = useRef(null);
    const titleRef = useRef(null);
    const subtitleRef = useRef(null);
    const ctaRef = useRef(null);
    const missionRef = useRef(null);
    const valuesRef = useRef(null);
    const featuresRef = useRef(null);
    const sloganRef = useRef(null);

    useEffect(() => {
        // Hero section animation
        const heroTl = gsap.timeline();

        heroTl
            .fromTo(heroRef.current,
                { background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)' },
                {
                    background: 'linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%)',
                    duration: 2,
                    ease: "power2.inOut"
                }
            )
            .fromTo(titleRef.current,
                {
                    y: 100,
                    opacity: 0,
                    scale: 0.8
                },
                {
                    y: 0,
                    opacity: 1,
                    scale: 1,
                    duration: 1.2,
                    ease: "back.out(1.7)"
                },
                "-=1"
            )
            .fromTo(subtitleRef.current,
                {
                    y: 50,
                    opacity: 0,
                    scale: 0.9
                },
                {
                    y: 0,
                    opacity: 1,
                    scale: 1,
                    duration: 1,
                    ease: "power2.out"
                },
                "-=0.8"
            )
            .fromTo(ctaRef.current,
                {
                    y: 30,
                    opacity: 0,
                    scale: 0.8
                },
                {
                    y: 0,
                    opacity: 1,
                    scale: 1,
                    duration: 0.8,
                    ease: "elastic.out(1, 0.3)"
                },
                "-=0.6"
            );

        // Floating animation for hero elements
        gsap.to([titleRef.current, subtitleRef.current], {
            y: -10,
            duration: 2,
            ease: "power1.inOut",
            yoyo: true,
            repeat: -1
        });

        // CTA button hover effect
        const ctaButton = ctaRef.current;
        ctaButton.addEventListener('mouseenter', () => {
            gsap.to(ctaButton, {
                scale: 1.05,
                duration: 0.3,
                ease: "power2.out"
            });
        });

        ctaButton.addEventListener('mouseleave', () => {
            gsap.to(ctaButton, {
                scale: 1,
                duration: 0.3,
                ease: "power2.out"
            });
        });

        // Scroll animations
        gsap.fromTo(missionRef.current,
            {
                x: -100,
                opacity: 0,
                rotationY: -15
            },
            {
                x: 0,
                opacity: 1,
                rotationY: 0,
                duration: 1,
                ease: "power2.out",
                scrollTrigger: {
                    trigger: missionRef.current,
                    start: "top 80%",
                    end: "bottom 20%",
                    toggleActions: "play none none reverse"
                }
            }
        );

        gsap.fromTo(valuesRef.current,
            {
                x: 100,
                opacity: 0,
                rotationY: 15
            },
            {
                x: 0,
                opacity: 1,
                rotationY: 0,
                duration: 1,
                ease: "power2.out",
                scrollTrigger: {
                    trigger: valuesRef.current,
                    start: "top 80%",
                    end: "bottom 20%",
                    toggleActions: "play none none reverse"
                }
            }
        );

        // Features animation with stagger
        const featureItems = featuresRef.current.querySelectorAll('.feature-item');
        gsap.fromTo(featureItems,
            {
                y: 50,
                opacity: 0,
                scale: 0.8
            },
            {
                y: 0,
                opacity: 1,
                scale: 1,
                duration: 0.8,
                ease: "back.out(1.7)",
                stagger: 0.2,
                scrollTrigger: {
                    trigger: featuresRef.current,
                    start: "top 80%",
                    end: "bottom 20%",
                    toggleActions: "play none none reverse"
                }
            }
        );

        // Slogan animation
        gsap.fromTo(sloganRef.current,
            {
                y: 30,
                opacity: 0,
                scale: 0.9
            },
            {
                y: 0,
                opacity: 1,
                scale: 1,
                duration: 1,
                ease: "elastic.out(1, 0.3)",
                scrollTrigger: {
                    trigger: sloganRef.current,
                    start: "top 80%",
                    end: "bottom 20%",
                    toggleActions: "play none none reverse"
                }
            }
        );

        // Parallax effect for background
        gsap.to(heroRef.current, {
            yPercent: -50,
            ease: "none",
            scrollTrigger: {
                trigger: heroRef.current,
                start: "top bottom",
                end: "bottom top",
                scrub: true
            }
        });

        return () => {
            // Cleanup
            ScrollTrigger.getAll().forEach(trigger => trigger.kill());
        };
    }, []);

    const handleGetStarted = () => {
        // Add click animation
        gsap.to(ctaRef.current, {
            scale: 0.95,
            duration: 0.1,
            ease: "power2.in",
            onComplete: () => {
                gsap.to(ctaRef.current, {
                    scale: 1,
                    duration: 0.1,
                    ease: "power2.out",
                    onComplete: () => {
                        navigate('/signin');
                    }
                });
            }
        });
    };

    return (
        <div className="intro-page">
            {/* Hero Section */}
            <section ref={heroRef} className="hero-section">
                <div className="hero-content">
                    <h1 ref={titleRef} className="hero-title">
                        üåü LaunchPad
                    </h1>
                    <p ref={subtitleRef} className="hero-subtitle">
                        T·ª´ √Ω t∆∞·ªüng ƒë·∫øn h√†nh ƒë·ªông ‚Äì C√πng nhau ti·∫øn xa
                    </p>
                    <button
                        ref={ctaRef}
                        className="cta-button"
                        onClick={handleGetStarted}
                    >
                        B·∫Øt ƒë·∫ßu ngay
                    </button>
                </div>
                <div className="hero-background">
                    <div className="floating-shapes">
                        <div className="shape shape-1"></div>
                        <div className="shape shape-2"></div>
                        <div className="shape shape-3"></div>
                        <div className="shape shape-4"></div>
                    </div>
                </div>
            </section>

            {/* Introduction Section */}
            <section className="intro-section">
                <div className="container">
                    <div ref={missionRef} className="mission-content">
                        <h2 className="section-title">Gi·ªõi thi·ªáu v·ªÅ ch√∫ng t√¥i</h2>
                        <p className="section-text">
                            LaunchPad l√† n·ªÅn t·∫£ng ti√™n phong d√†nh cho nh·ªØng c√° nh√¢n ƒëang t√¨m ki·∫øm c·ªông s·ª± ƒë·ªÉ c√πng bi·∫øn √Ω t∆∞·ªüng th√†nh hi·ªán th·ª±c. D√π b·∫°n l√† sinh vi√™n, freelancer hay chuy√™n gia, t·∫°i ƒë√¢y b·∫°n c√≥ th·ªÉ:
                        </p>
                        <ul className="feature-list">
                            <li>ƒêƒÉng t·∫£i c√°c d·ª± √°n t√¢m huy·∫øt c·ªßa m√¨nh</li>
                            <li>T√¨m ki·∫øm th√†nh vi√™n ph√π h·ª£p theo k·ªπ nƒÉng, lƒ©nh v·ª±c</li>
                            <li>L√†m vi·ªác nh√≥m hi·ªáu qu·∫£ v·ªõi c√°c c√¥ng c·ª• t√≠ch h·ª£p nh∆∞ chat, kanban, l·ªãch tr√¨nh</li>
                        </ul>
                        <p className="section-text">
                            Ch√∫ng t√¥i x√¢y d·ª±ng LaunchPad v·ªõi m·ª•c ti√™u tr·ªü th√†nh b·ªá ph√≥ng cho c√°c d·ª± √°n kh·ªüi ƒë·∫ßu t·ª´ ƒëam m√™, ti·∫øn xa nh·ªù c·ªông t√°c.
                        </p>
                    </div>
                </div>
            </section>

            {/* Mission Section */}
            <section className="mission-section">
                <div className="container">
                    <div ref={missionRef} className="mission-content">
                        <h2 className="section-title">üéØ S·ª© m·ªánh c·ªßa ch√∫ng t√¥i</h2>
                        <h3 className="mission-heading">K·∫øt n·ªëi nh·ªØng b·ªô √≥c kh√°t khao t·∫°o ra gi√° tr·ªã.</h3>
                        <p className="section-text">
                            Ch√∫ng t√¥i tin r·∫±ng m·ªçi √Ω t∆∞·ªüng tuy·ªát v·ªùi ƒë·ªÅu c·∫ßn m·ªôt ƒë·ªôi ng≈© xu·∫•t s·∫Øc ƒë·ªÉ hi·ªán th·ª±c h√≥a. LaunchPad kh√¥ng ch·ªâ gi√∫p b·∫°n t√¨m ƒë∆∞·ª£c ng∆∞·ªùi ƒë·ªìng h√†nh, m√† c√≤n cung c·∫•p m√¥i tr∆∞·ªùng l√†m vi·ªác tr·ª±c tuy·∫øn hi·ªáu qu·∫£, t·ª´ giai ƒëo·∫°n l√™n √Ω t∆∞·ªüng ƒë·∫øn ho√†n thi·ªán d·ª± √°n.
                        </p>
                    </div>
                </div>
            </section>

            {/* Values Section */}
            <section className="values-section">
                <div className="container">
                    <div ref={valuesRef} className="values-content">
                        <h2 className="section-title">üí° Gi√° tr·ªã c·ªët l√µi</h2>
                        <div className="values-grid">
                            <div className="value-item">
                                <h3>K·∫øt n·ªëi th·ª±c ch·∫•t</h3>
                                <p>Kh√¥ng ch·ªâ l√† h·ªì s∆° ‚Äì ch√∫ng t√¥i h∆∞·ªõng ƒë·∫øn s·ª± ph√π h·ª£p v·ªÅ nƒÉng l·ª±c v√† m·ª•c ti√™u.</p>
                            </div>
                            <div className="value-item">
                                <h3>H·ª£p t√°c hi·ªáu qu·∫£</h3>
                                <p>Cung c·∫•p c√¥ng c·ª• gi√∫p nh√≥m v·∫≠n h√†nh m∆∞·ª£t m√† nh∆∞ m·ªôt t·ªï ch·ª©c chuy√™n nghi·ªáp.</p>
                            </div>
                            <div className="value-item">
                                <h3>Trao quy·ªÅn cho c√° nh√¢n</h3>
                                <p>M·ªçi ng∆∞·ªùi ƒë·ªÅu c√≥ th·ªÉ b·∫Øt ƒë·∫ßu m·ªôt ƒëi·ªÅu g√¨ ƒë√≥ l·ªõn lao.</p>
                            </div>
                            <div className="value-item">
                                <h3>Minh b·∫°ch & t√¥n tr·ªçng</h3>
                                <p>VƒÉn h√≥a l√†m vi·ªác t√≠ch c·ª±c, r√µ r√†ng v√† t√¥n tr·ªçng m·ªçi √Ω ki·∫øn.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            {/* Slogan Section */}
            <section className="slogan-section">
                <div className="container">
                    <div ref={sloganRef} className="slogan-content">
                        <h2 className="slogan-title">‚ú® Slogan g·ª£i √Ω</h2>
                        <div className="slogan-grid">
                            <div className="slogan-item">"T·ª´ √Ω t∆∞·ªüng ƒë·∫øn h√†nh ƒë·ªông ‚Äì C√πng nhau ti·∫øn xa."</div>
                            <div className="slogan-item">"K·∫øt n·ªëi ƒë√∫ng ng∆∞·ªùi ‚Äì Kh·ªüi t·∫°o ƒë√∫ng gi√° tr·ªã."</div>
                            <div className="slogan-item">"Launch your dream. Build with the right team."</div>
                            <div className="slogan-item">"Kh√¥ng c√≤n ƒë∆°n ƒë·ªôc tr√™n h√†nh tr√¨nh kh·ªüi nghi·ªáp."</div>
                            <div className="slogan-item">"M·ªói d·ª± √°n ƒë·ªÅu x·ª©ng ƒë√°ng c√≥ m·ªôt ƒë·ªôi ng≈© tuy·ªát v·ªùi."</div>
                            <div className="slogan-item">"C·ªông t√°c d·ªÖ d√†ng, ph√°t tri·ªÉn kh√¥ng gi·ªõi h·∫°n."</div>
                        </div>
                    </div>
                </div>
            </section>

            {/* Features Section */}
            <section className="features-section">
                <div className="container">
                    <div ref={featuresRef} className="features-content">
                        <h2 className="section-title">üìå T√≠nh nƒÉng n·ªïi b·∫≠t</h2>
                        <div className="features-grid">
                            <div className="feature-item">
                                <h3>B·∫£ng tuy·ªÉn th√†nh vi√™n th√¥ng minh</h3>
                                <p>G·ª£i √Ω ·ª©ng vi√™n ph√π h·ª£p theo lƒ©nh v·ª±c, k·ªπ nƒÉng, v√† m·ª•c ti√™u c√° nh√¢n.</p>
                            </div>
                            <div className="feature-item">
                                <h3>Chat & th√¥ng b√°o th·ªùi gian th·ª±c</h3>
                                <p>Trao ƒë·ªïi linh ho·∫°t, g·∫Øn k·∫øt d·ªÖ d√†ng.</p>
                            </div>
                            <div className="feature-item">
                                <h3>Kanban Board v√† Qu·∫£n l√Ω ti·∫øn ƒë·ªô</h3>
                                <p>Theo d√µi c√¥ng vi·ªác, ph√¢n c√¥ng r√µ r√†ng.</p>
                            </div>
                            <div className="feature-item">
                                <h3>H·ªì s∆° c√° nh√¢n & Portfolio</h3>
                                <p>Th·ªÉ hi·ªán nƒÉng l·ª±c v√† kinh nghi·ªám n·ªïi b·∫≠t.</p>
                            </div>
                            <div className="feature-item">
                                <h3>Kh√¥ng gian nh√≥m ri√™ng t∆∞</h3>
                                <p>T·∫≠p trung, b·∫£o m·∫≠t v√† hi·ªáu qu·∫£.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            {/* Final CTA Section */}
            <section className="final-cta-section">
                <div className="container">
                    <div className="final-cta-content">
                        <h2>S·∫µn s√†ng b·∫Øt ƒë·∫ßu h√†nh tr√¨nh?</h2>
                        <p>Tham gia LaunchPad ngay h√¥m nay v√† t√¨m ki·∫øm c·ªông s·ª± cho d·ª± √°n c·ªßa b·∫°n</p>
                        <button
                            className="cta-button final-cta"
                            onClick={handleGetStarted}
                        >
                            B·∫Øt ƒë·∫ßu ngay
                        </button>
                    </div>
                </div>
            </section>
        </div>
    );
};

export default IntroPage; 