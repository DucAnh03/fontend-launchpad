import React, { useState } from "react";
import {
  Modal,
  Form,
  Input,
  Button,
  message,
  Spin,
  Select,
  Tag,
  Divider,
} from "antd";
import {
  SendOutlined,
  LoadingOutlined,
  PlusOutlined,
  MinusCircleOutlined,
  UserOutlined,
  LinkOutlined,
  FileTextOutlined,
  GlobalOutlined,
  StarOutlined,
} from "@ant-design/icons";
import api from "@/services/api/axios";
import "./ApplyRecruitmentModal.css";

const { TextArea } = Input;
const { Option } = Select;

const proficiencyOptions = [
  { label: "Beginner", value: "beginner", color: "#f50" },
  { label: "Intermediate", value: "intermediate", color: "#2db7f5" },
  { label: "Advanced", value: "advanced", color: "#87d068" },
  { label: "Native", value: "native", color: "#108ee9" },
];

const ApplyRecruitmentModal = ({
  visible,
  onCancel,
  onSuccess,
  postId,
  postTitle,
}) => {
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [currentStep, setCurrentStep] = useState(0);

  const handleSubmit = async (values) => {
    try {
      setLoading(true);

      // Get JWT token from localStorage
      const token = localStorage.getItem("token");
      if (!token) {
        message.error("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ·ª©ng tuy·ªÉn");
        setLoading(false);
        return;
      }

      // Prepare request data - th√™m reason v√†o ƒë√¢y
      const requestData = {
        reason: values.reason,
        portfolioUrl: values.portfolioUrl,
        portfolioUrls: values.portfolioUrls?.filter(Boolean) || [],
        socialLinks: values.socialLinks || {},
        resumeUrl: values.resumeUrl,
        languages: values.languages?.filter((l) => l && l.language) || [],
        // Th√™m c√°c tr∆∞·ªùng m·ªõi
        experience: values.experience,
        skills: values.skills?.filter(Boolean) || [],
      };

      // Make API request
      const response = await api.post(
        `/recruitment-posts/${postId}/applications`,
        requestData
      );

      if (response.status === 200 || response.status === 201) {
        message.success("ƒê√£ g·ª≠i ƒë∆°n ·ª©ng tuy·ªÉn th√†nh c√¥ng!");
        form.resetFields();
        onSuccess && onSuccess();
        onCancel();
      } else {
        message.error("C√≥ l·ªói x·∫£y ra khi g·ª≠i ƒë∆°n ·ª©ng tuy·ªÉn");
      }
    } catch (error) {
      console.error("Apply recruitment error:", error);

      // Ki·ªÉm tra l·ªói unique constraint (duplicate application)
      if (
        error.response?.data?.message?.includes("11000") ||
        error.response?.data?.code === 11000 ||
        error.response?.status === 400
      ) {
        message.error("B·∫°n ch·ªâ ƒë∆∞·ª£c ·ª©ng tuy·ªÉn v√†o v·ªã tr√≠ n√†y 1 l·∫ßn!");
      } else if (error.response) {
        const errorMessage =
          error.response.data?.message || "C√≥ l·ªói x·∫£y ra khi g·ª≠i ƒë∆°n ·ª©ng tuy·ªÉn";
        message.error(errorMessage);
      } else if (error.request) {
        message.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau.");
      } else {
        message.error("C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.");
      }
    } finally {
      setLoading(false);
    }
  };

  const handleCancel = () => {
    if (!loading) {
      form.resetFields();
      onCancel();
    }
  };

  return (
    <Modal
      title={
        <div className="flex items-center gap-4 p-2">
          <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-blue-500 via-purple-500 to-pink-500 flex items-center justify-center shadow-lg">
            <SendOutlined className="text-white text-lg" />
          </div>
          <div>
            <h3 className="text-xl font-bold text-gray-900 m-0">
              ·ª®ng tuy·ªÉn v√†o d·ª± √°n
            </h3>
            {postTitle && (
              <p className="text-sm text-gray-600 m-0 mt-1 font-medium">
                üìã {postTitle}
              </p>
            )}
          </div>
        </div>
      }
      open={visible}
      onCancel={handleCancel}
      footer={null}
      width={700}
      className="apply-recruitment-modal"
      maskClosable={!loading}
      closable={!loading}
      styles={{
        body: { padding: "24px" },
      }}
    >
      <div className="space-y-6">
        {/* Header Section */}
        <div className="bg-gradient-to-r from-blue-50 to-purple-50 p-6 rounded-2xl border border-blue-100">
          <div className="flex items-center gap-3 mb-3">
            <UserOutlined className="text-blue-600 text-lg" />
            <h4 className="text-lg font-semibold text-gray-800 m-0">
              Th√¥ng tin ·ª©ng tuy·ªÉn
            </h4>
          </div>
          <p className="text-gray-600 mb-0">
            H√£y cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·ªÉ tƒÉng c∆° h·ªôi ƒë∆∞·ª£c ch·∫•p nh·∫≠n v√†o d·ª±
            √°n
          </p>
        </div>

        <Form
          form={form}
          layout="vertical"
          onFinish={handleSubmit}
          className="apply-form space-y-6"
          scrollToFirstError
        >
          {/* Main Reason Field - Improved */}
          <div className="bg-white border border-gray-200 rounded-2xl p-6 shadow-sm">
            <div className="flex items-center gap-3 mb-4">
              <div className="w-8 h-8 rounded-lg bg-red-100 flex items-center justify-center">
                <FileTextOutlined className="text-red-600" />
              </div>
              <h4 className="text-lg font-semibold text-gray-800 m-0">
                L√Ω do ·ª©ng tuy·ªÉn <span className="text-red-500">*</span>
              </h4>
            </div>

            <Form.Item
              name="reason"
              rules={[
                {
                  required: true,
                  message: "Vui l√≤ng nh·∫≠p l√Ω do ·ª©ng tuy·ªÉn",
                },
                {
                  min: 20,
                  message:
                    "L√Ω do ·ª©ng tuy·ªÉn ph·∫£i c√≥ √≠t nh·∫•t 20 k√Ω t·ª± ƒë·ªÉ th·ªÉ hi·ªán s·ª± ch√¢n th√†nh",
                },
                {
                  max: 1000,
                  message: "L√Ω do ·ª©ng tuy·ªÉn kh√¥ng ƒë∆∞·ª£c qu√° 1000 k√Ω t·ª±",
                },
              ]}
            >
              <TextArea
                placeholder="H√£y chia s·∫ª chi ti·∫øt v·ªÅ:
‚Ä¢ T·∫°i sao b·∫°n quan t√¢m ƒë·∫øn d·ª± √°n n√†y?
‚Ä¢ Nh·ªØng kinh nghi·ªám/k·ªπ nƒÉng n√†o b·∫°n c√≥ th·ªÉ ƒë√≥ng g√≥p?
‚Ä¢ B·∫°n mong mu·ªën h·ªçc ƒë∆∞·ª£c g√¨ t·ª´ d·ª± √°n n√†y?
‚Ä¢ Cam k·∫øt th·ªùi gian v√† s·ª± tham gia c·ªßa b·∫°n..."
                rows={8}
                className="rounded-xl border-gray-200 focus:border-blue-400 focus:ring-2 focus:ring-blue-100 transition-all duration-200 resize-none text-gray-700"
                disabled={loading}
                showCount
                maxLength={1000}
              />
            </Form.Item>

            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3 mt-3">
              <p className="text-yellow-800 text-sm m-0 flex items-start gap-2">
                <StarOutlined className="text-yellow-600 mt-0.5 flex-shrink-0" />
                <span>
                  <strong>M·∫πo:</strong> M·ªôt l√Ω do ·ª©ng tuy·ªÉn chi ti·∫øt v√† ch√¢n
                  th√†nh s·∫Ω tƒÉng ƒë√°ng k·ªÉ c∆° h·ªôi ƒë∆∞·ª£c ch·ªçn!
                </span>
              </p>
            </div>
          </div>

          {/* Skills Section */}
          <div className="bg-white border border-gray-200 rounded-2xl p-6 shadow-sm">
            <div className="flex items-center gap-3 mb-4">
              <div className="w-8 h-8 rounded-lg bg-green-100 flex items-center justify-center">
                <StarOutlined className="text-green-600" />
              </div>
              <h4 className="text-lg font-semibold text-gray-800 m-0">
                K·ªπ nƒÉng ch√≠nh
              </h4>
            </div>

            <Form.List name="skills">
              {(fields, { add, remove }) => (
                <div className="space-y-3">
                  {fields.map((field, idx) => (
                    <div key={field.key} className="flex items-center gap-3">
                      <Form.Item {...field} className="flex-1 mb-0">
                        <Input
                          placeholder={`V√≠ d·ª•: React, Node.js, Python, Design...`}
                          disabled={loading}
                          className="rounded-lg"
                        />
                      </Form.Item>
                      <Button
                        icon={<MinusCircleOutlined />}
                        onClick={() => remove(field.name)}
                        disabled={loading}
                        className="border-red-200 text-red-500 hover:border-red-300 hover:text-red-600"
                      />
                    </div>
                  ))}
                  <Button
                    type="dashed"
                    onClick={() => add()}
                    icon={<PlusOutlined />}
                    className="w-full h-10 rounded-lg border-green-200 text-green-600 hover:border-green-300 hover:text-green-700"
                    disabled={loading}
                  >
                    Th√™m k·ªπ nƒÉng
                  </Button>
                </div>
              )}
            </Form.List>
          </div>

          {/* Experience Field */}
          <div className="bg-white border border-gray-200 rounded-2xl p-6 shadow-sm">
            <div className="flex items-center gap-3 mb-4">
              <div className="w-8 h-8 rounded-lg bg-purple-100 flex items-center justify-center">
                <UserOutlined className="text-purple-600" />
              </div>
              <h4 className="text-lg font-semibold text-gray-800 m-0">
                Kinh nghi·ªám li√™n quan
              </h4>
            </div>

            <Form.Item name="experience">
              <TextArea
                placeholder="Chia s·∫ª v·ªÅ kinh nghi·ªám l√†m vi·ªác, d·ª± √°n ƒë√£ tham gia, th√†nh t·ª±u ƒë√°ng ch√∫ √Ω..."
                rows={4}
                className="rounded-xl border-gray-200 focus:border-purple-400 focus:ring-2 focus:ring-purple-100 transition-all duration-200 resize-none"
                disabled={loading}
                showCount
                maxLength={500}
              />
            </Form.Item>
          </div>

          {/* Portfolio & Links Section */}
          <div className="bg-white border border-gray-200 rounded-2xl p-6 shadow-sm">
            <div className="flex items-center gap-3 mb-4">
              <div className="w-8 h-8 rounded-lg bg-blue-100 flex items-center justify-center">
                <LinkOutlined className="text-blue-600" />
              </div>
              <h4 className="text-lg font-semibold text-gray-800 m-0">
                Portfolio & Li√™n k·∫øt
              </h4>
            </div>

            <div className="space-y-4">
              {/* Main Portfolio */}
              <Form.Item
                name="portfolioUrl"
                label="Link Portfolio ch√≠nh"
                rules={[{ type: "url", message: "Vui l√≤ng nh·∫≠p URL h·ª£p l·ªá" }]}
              >
                <Input
                  placeholder="https://your-portfolio.com"
                  className="rounded-lg"
                  disabled={loading}
                  prefix={<LinkOutlined className="text-gray-400" />}
                />
              </Form.Item>

              {/* Additional Portfolios */}
              <Form.List name="portfolioUrls">
                {(fields, { add, remove }) => (
                  <div className="space-y-3">
                    <label className="text-gray-700 font-medium">
                      Portfolio kh√°c
                    </label>
                    {fields.map((field, idx) => (
                      <div key={field.key} className="flex items-center gap-3">
                        <Form.Item
                          {...field}
                          className="flex-1 mb-0"
                          rules={[{ type: "url", message: "URL kh√¥ng h·ª£p l·ªá" }]}
                        >
                          <Input
                            placeholder={`Portfolio #${idx + 1}`}
                            disabled={loading}
                            className="rounded-lg"
                            prefix={<LinkOutlined className="text-gray-400" />}
                          />
                        </Form.Item>
                        <Button
                          icon={<MinusCircleOutlined />}
                          onClick={() => remove(field.name)}
                          disabled={loading}
                          className="border-red-200 text-red-500"
                        />
                      </div>
                    ))}
                    <Button
                      type="dashed"
                      onClick={() => add()}
                      icon={<PlusOutlined />}
                      className="w-full rounded-lg"
                      disabled={loading}
                    >
                      Th√™m portfolio
                    </Button>
                  </div>
                )}
              </Form.List>

              {/* Social Links */}
              <div>
                <label className="text-gray-700 font-medium mb-3 block">
                  M·∫°ng x√£ h·ªôi
                </label>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                  <Form.Item
                    name={["socialLinks", "linkedin"]}
                    className="mb-0"
                    rules={[
                      { type: "url", message: "LinkedIn URL kh√¥ng h·ª£p l·ªá" },
                    ]}
                  >
                    <Input
                      placeholder="LinkedIn"
                      disabled={loading}
                      className="rounded-lg"
                      prefix={
                        <span className="text-blue-600 font-bold">in</span>
                      }
                    />
                  </Form.Item>
                  <Form.Item
                    name={["socialLinks", "github"]}
                    className="mb-0"
                    rules={[
                      { type: "url", message: "GitHub URL kh√¥ng h·ª£p l·ªá" },
                    ]}
                  >
                    <Input
                      placeholder="GitHub"
                      disabled={loading}
                      className="rounded-lg"
                      prefix={
                        <span className="text-gray-800 font-bold">‚ö°</span>
                      }
                    />
                  </Form.Item>
                  <Form.Item
                    name={["socialLinks", "website"]}
                    className="mb-0"
                    rules={[
                      { type: "url", message: "Website URL kh√¥ng h·ª£p l·ªá" },
                    ]}
                  >
                    <Input
                      placeholder="Website"
                      disabled={loading}
                      className="rounded-lg"
                      prefix={<GlobalOutlined className="text-gray-400" />}
                    />
                  </Form.Item>
                </div>
              </div>

              {/* Resume */}
              <Form.Item
                name="resumeUrl"
                label="Link CV/Resume"
                rules={[{ type: "url", message: "Vui l√≤ng nh·∫≠p URL h·ª£p l·ªá" }]}
              >
                <Input
                  placeholder="https://drive.google.com/your-cv"
                  className="rounded-lg"
                  disabled={loading}
                  prefix={<FileTextOutlined className="text-gray-400" />}
                />
              </Form.Item>
            </div>
          </div>

          {/* Languages Section */}
          <div className="bg-white border border-gray-200 rounded-2xl p-6 shadow-sm">
            <div className="flex items-center gap-3 mb-4">
              <div className="w-8 h-8 rounded-lg bg-orange-100 flex items-center justify-center">
                <GlobalOutlined className="text-orange-600" />
              </div>
              <h4 className="text-lg font-semibold text-gray-800 m-0">
                Ng√¥n ng·ªØ
              </h4>
            </div>

            <Form.List name="languages">
              {(fields, { add, remove }) => (
                <div className="space-y-3">
                  {fields.map((field, idx) => (
                    <div key={field.key} className="flex items-center gap-3">
                      <Form.Item
                        {...field}
                        name={[field.name, "language"]}
                        rules={[
                          { required: true, message: "Nh·∫≠p t√™n ng√¥n ng·ªØ" },
                        ]}
                        className="flex-1 mb-0"
                      >
                        <Input
                          placeholder="Ti·∫øng Vi·ªát, English, Êó•Êú¨Ë™û..."
                          disabled={loading}
                          className="rounded-lg"
                        />
                      </Form.Item>
                      <Form.Item
                        {...field}
                        name={[field.name, "proficiency"]}
                        rules={[{ required: true, message: "Ch·ªçn tr√¨nh ƒë·ªô" }]}
                        className="flex-1 mb-0"
                      >
                        <Select
                          placeholder="Tr√¨nh ƒë·ªô"
                          disabled={loading}
                          className="rounded-lg"
                        >
                          {proficiencyOptions.map((opt) => (
                            <Option key={opt.value} value={opt.value}>
                              <Tag color={opt.color}>{opt.label}</Tag>
                            </Option>
                          ))}
                        </Select>
                      </Form.Item>
                      <Button
                        icon={<MinusCircleOutlined />}
                        onClick={() => remove(field.name)}
                        disabled={loading}
                        className="border-red-200 text-red-500"
                      />
                    </div>
                  ))}
                  <Button
                    type="dashed"
                    onClick={() => add()}
                    icon={<PlusOutlined />}
                    className="w-full h-10 rounded-lg"
                    disabled={loading}
                  >
                    Th√™m ng√¥n ng·ªØ
                  </Button>
                </div>
              )}
            </Form.List>
          </div>

          {/* Action Buttons */}
          <div className="flex gap-4 pt-4">
            <Button
              type="default"
              onClick={handleCancel}
              disabled={loading}
              className="flex-1 h-12 rounded-xl border-gray-200 text-gray-600 hover:border-gray-300 hover:text-gray-700 transition-all duration-200 font-medium"
              size="large"
            >
              H·ªßy b·ªè
            </Button>
            <Button
              type="primary"
              htmlType="submit"
              loading={loading}
              disabled={loading}
              icon={loading ? <LoadingOutlined /> : <SendOutlined />}
              className="flex-1 h-12 bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 hover:from-blue-600 hover:via-purple-600 hover:to-pink-600 border-none rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 font-semibold text-white"
              size="large"
            >
              {loading ? "ƒêang g·ª≠i..." : "G·ª≠i ƒë∆°n ·ª©ng tuy·ªÉn üöÄ"}
            </Button>
          </div>
        </Form>

        {/* Tips Section */}
        <div className="bg-gradient-to-r from-green-50 to-blue-50 p-6 rounded-2xl border border-green-200 mt-6">
          <div className="flex items-start gap-4">
            <div className="w-10 h-10 rounded-full bg-gradient-to-br from-green-400 to-blue-500 flex items-center justify-center flex-shrink-0">
              <span className="text-white text-lg font-bold">üí°</span>
            </div>
            <div>
              <h4 className="text-lg font-semibold text-gray-800 mb-3">
                M·∫πo ƒë·ªÉ tƒÉng c∆° h·ªôi ƒë∆∞·ª£c ch·ªçn
              </h4>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm text-gray-700">
                <div className="flex items-start gap-2">
                  <span className="text-green-500 font-bold">‚úì</span>
                  <span>Vi·∫øt l√Ω do ·ª©ng tuy·ªÉn chi ti·∫øt v√† ch√¢n th√†nh</span>
                </div>
                <div className="flex items-start gap-2">
                  <span className="text-green-500 font-bold">‚úì</span>
                  <span>ƒê√≠nh k√®m portfolio/CV ch·∫•t l∆∞·ª£ng cao</span>
                </div>
                <div className="flex items-start gap-2">
                  <span className="text-green-500 font-bold">‚úì</span>
                  <span>Li·ªát k√™ k·ªπ nƒÉng ph√π h·ª£p v·ªõi d·ª± √°n</span>
                </div>
                <div className="flex items-start gap-2">
                  <span className="text-green-500 font-bold">‚úì</span>
                  <span>Th·ªÉ hi·ªán s·ª± cam k·∫øt v√† nhi·ªát t√¨nh</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </Modal>
  );
};

export default ApplyRecruitmentModal;
